using System;
using System.IO;

namespace ATM_MachineSimulator_ConsoleApp
{
    class ATM
    {
        // File path to store account balance
        static string filePath = "account.txt";

        static void Main()
        {
            // Check if the account file exists. If not, create a new one with a default balance of 1000
            if (!File.Exists(filePath))
            {
                Console.WriteLine("Creating a new account with a default balance of 1000");
                File.WriteAllText(filePath, "1000"); // Initialize account file with balance
            }

            Console.WriteLine("Welcome to the ATM!");

            // Infinite loop to continuously present the menu options to the user
            while (true)
            {
                Console.WriteLine("\nPlease select an option:");
                Console.WriteLine("1. Check Balance");
                Console.WriteLine("2. Deposit Money");
                Console.WriteLine("3. Withdraw Money");
                Console.WriteLine("4. Exit");

                // Read the user's menu choice
                string choice = Console.ReadLine();

                // Process user's choice using a switch statement
                switch (choice)
                {
                    case "1":
                        CheckBalance(); // Show the current balance
                        break;
                    case "2":
                        DepositMoney(); // Deposit money into the account
                        break;
                    case "3":
                        WithdrawMoney(); // Withdraw money from the account
                        break;
                    case "4":
                        Console.WriteLine("Thank you for using the ATM. Goodbye!");
                        return; // Exit the application
                    default:
                        Console.WriteLine("Invalid choice. Please try again."); // Handle invalid input
                        break;
                }
            }
        }

        // Method to check the current balance
        static void CheckBalance()
        {
            decimal balance = GetBalance(); // Retrieve the current balance from the file
            Console.WriteLine($"Your current balance is: {balance:C}"); // Display the balance in currency format
        }

        // Method to deposit money into the account
        static void DepositMoney()
        {
            Console.Write("Enter the amount to deposit: ");
            if (decimal.TryParse(Console.ReadLine(), out decimal depositAmount) && depositAmount > 0) // Validate input
            {
                decimal balance = GetBalance(); // Retrieve the current balance
                balance += depositAmount; // Add the deposit amount to the balance
                UpdateBalance(balance); // Update the new balance in the file
                Console.WriteLine($"Deposit successful! Your new balance is: {balance:C}");
            }
            else
            {
                Console.WriteLine("Invalid amount. Please try again."); // Handle invalid input
            }
        }

        // Method to withdraw money from the account
        static void WithdrawMoney()
        {
            Console.Write("Enter the amount to withdraw: ");
            if (decimal.TryParse(Console.ReadLine(), out decimal withdrawalAmount) && withdrawalAmount > 0) // Validate input
            {
                decimal balance = GetBalance(); // Retrieve the current balance
                if (withdrawalAmount <= balance) // Check if there are sufficient funds
                {
                    balance -= withdrawalAmount; // Deduct the withdrawal amount
                    UpdateBalance(balance); // Update the new balance in the file
                    Console.WriteLine($"Withdrawal successful! Your new balance is: {balance:C}");
                }
                else
                {
                    Console.WriteLine("Insufficient funds. Please try a smaller amount."); // Handle insufficient funds
                }
            }
            else
            {
                Console.WriteLine("Invalid amount. Please try again."); // Handle invalid input
            }
        }

        // Method to retrieve the current balance from the file
        static decimal GetBalance()
        {
            try
            {
                string balanceText = File.ReadAllText(filePath); // Read balance as text from the file
                return decimal.Parse(balanceText); // Parse the balance as a decimal
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error reading balance: {ex.Message}"); // Handle any file reading errors
                return 0; // Return a default balance of 0 in case of an error
            }
        }

        // Method to update the balance in the file
        static void UpdateBalance(decimal balance)
        {
            try
            {
                File.WriteAllText(filePath, balance.ToString()); // Write the updated balance to the file
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error updating balance: {ex.Message}"); // Handle any file writing errors
            }
        }
    }
}
